#include "Stage.h"
#include	"../system/System.h"
#include	"../BaseChara/BaseChara.h"

//******************************************************************************************************************************************************************************************
//
//		BaseStageBuilクラス
//
//******************************************************************************************************************************************************************************************
BaseStageBuil::BaseStageBuil()
{
	obj = NULL;
	pos =	Vector3(0, 0, 0);
	move =	Vector3(0, 0, 0);
	angle = Vector3(0, 0, 0);
	scale = Vector3(1, 1, 1);
	initPos = pos;
	initAngle = angle;
	life = 2;
	state = NORMAL;
	timer = 0;
	speed = 0.0f;
	renderFlag = true;
	collisionFlag = true;
}

BaseStageBuil::~BaseStageBuil()
{
	if (obj)
	{
		delete obj;
	}
}

//*****************************************************************************************************************************
//
//		初期化
//
//*****************************************************************************************************************************
void	BaseStageBuil::Initialize(char* filename)
{
	if (obj)
	{
		delete obj;
		obj = NULL;
	}
	obj = new iexMesh(filename);
	initPos = pos;
}

//*****************************************************************************************************************************
//
//		更新
//
//*****************************************************************************************************************************
void	BaseStageBuil::Update()
{
	switch (state)
	{
	case NORMAL:	//	通常時
		
		break;
		
	case HOLD:		//持たれている時
		timer = 0;
		collisionFlag = false;
		break;
		
	case THROW:		//	投げられてる時
		timer++;
		collisionFlag = true;
	//	move.y -= 0.01f;
		pos += move;
		if (timer > 600)state = BREAK; //時間が立つと壊れる
		break;
	case DAMAGE:

		break;
	case RESPAWN:
		timer++;
		pos.y += 0.1f;
		if (timer > 50)
		{
			state = NORMAL;
			renderFlag = true;
			collisionFlag = true;
		}
		break;
	case BREAK:
		collisionFlag = false;
		renderFlag = false;
		SetMove(Vector3(0, 0, 0));
		//壊れたらスポーンタイム経過後復活する
		timer++;
		if (SPAWNTIME <= timer)
		{
			pos = initPos;
			pos.y -= 5.0f;
			timer = 0;
			state = RESPAWN;
		}
		break;
	}

	pos += move;
	obj->SetPos(pos);
	obj->SetAngle(angle);
	obj->SetScale(scale);
	obj->Update();
}

//*****************************************************************************************************************************
//
//		描画
//
//*****************************************************************************************************************************
void	BaseStageBuil::Render()
{
	if (renderFlag) obj->Render(shader, "copy");
}

//*****************************************************************************************************************************
//
//		プレイヤーとの当たり判定
//
//*****************************************************************************************************************************
Vector3 BaseStageBuil::CollisionPlayer(const Vector3&pos, Vector3&vec, Vector3&local,int pmode)
{
	Matrix mat = obj->TransMatrix;
	D3DXMatrixInverse(&mat, NULL, &mat);

	//プレイヤー位置をローカル化
	local.x = pos.x*mat._11 + pos.y*mat._21 + pos.z*mat._31 + mat._41;
	local.y = pos.x*mat._12 + pos.y*mat._22 + pos.z*mat._32 + mat._42;
	local.z = pos.x*mat._13 + pos.y*mat._23 + pos.z*mat._33 + mat._43;

	/*local = pos;*/

	Vector3 p = local;


	Vector3 out;
	float dist = 10.0f;

	if (obj->RayPick(&out, &p, &vec, &dist) >= 0)
	{
		//当たり位置の保存
		local = out;
		return out;
	}

	return Vector3(0, 0, 0);

}

//*****************************************************************************************************************************
//
//		建物との当たり判定
//
//*****************************************************************************************************************************
bool BaseStageBuil::CollisionBuil(Vector3 p1, float r1, Vector3 p2, float r2)
{
	Vector3	vec = p2 - p1;
	float dist = vec.Length();

	if (dist < r1)
	{
		return true;
	}
	else			return false;
}

//*****************************************************************************************************************************
//
//		ワールド変換
//
//*****************************************************************************************************************************
void BaseStageBuil::BuilToWorld(Vector3&inout)
{
	Matrix mat = obj->TransMatrix;
	Vector3 pos = inout;

	//ローカル位置をワールド変換する
	inout.x = pos.x*mat._11 + pos.y*mat._21 + pos.z*mat._31 + mat._41;
	inout.y = pos.x*mat._12 + pos.y*mat._22 + pos.z*mat._32 + mat._42;
	inout.z = pos.x*mat._13 + pos.y*mat._23 + pos.z*mat._33 + mat._43;

}

//******************************************************************************************************************************************************************************************
//
//		Builクラス
//
//******************************************************************************************************************************************************************************************
//*****************************************************************************************************************************
//
//		初期化
//
//*****************************************************************************************************************************
void Buil::Initialize( char* filename)
{
	BaseStageBuil::Initialize(filename);
}

//*****************************************************************************************************************************
//
//		更新
//
//*****************************************************************************************************************************
void Buil::Update()
{
	BaseStageBuil::Update();
	
}

//************************************************************************
//
//   ステージ
//
//************************************************************************

